# Generated by Django 4.2.24 on 2025-09-10 08:46

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import encrypted_model_fields.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Deployment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('trigger_reason', models.CharField(choices=[('initial', 'Initial Deployment'), ('redeploy', 'Redeployment'), ('resume', 'Resume Deployment'), ('manual_fix', 'Manual Fix')], max_length=20)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('running', 'Running'), ('failed', 'Failed'), ('succeeded', 'Succeeded')], default='pending', max_length=20)),
                ('started_at', models.DateTimeField(blank=True, null=True)),
                ('ended_at', models.DateTimeField(blank=True, null=True)),
                ('duration_seconds', models.IntegerField(blank=True, null=True)),
                ('meta', models.JSONField(blank=True, default=dict)),
                ('summary', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='DeploymentStep',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('step_key', models.CharField(choices=[('project.create', 'Project Creation'), ('service.create', 'Service Creation'), ('service.git_attach', 'Git Attachment'), ('service.build_config', 'Build Configuration'), ('service.env_set', 'Environment Setup'), ('db.create', 'Database Creation'), ('db.deploy', 'Database Deployment'), ('service.deploy', 'Service Deployment'), ('service.wait_deploy', 'Wait for Deployment'), ('domains.create', 'Domain Creation'), ('domains.wait_propagation', 'Domain Propagation'), ('health.check', 'Health Check'), ('health.retry', 'Health Retry'), ('internal.provision', 'Internal Provisioning'), ('email.notify_success', 'Success Notification'), ('email.notify_failure', 'Failure Notification')], max_length=50)),
                ('order', models.IntegerField(default=0)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('running', 'Running'), ('success', 'Success'), ('failed', 'Failed'), ('skipped', 'Skipped')], default='pending', max_length=20)),
                ('attempts', models.IntegerField(default=0)),
                ('started_at', models.DateTimeField(blank=True, null=True)),
                ('ended_at', models.DateTimeField(blank=True, null=True)),
                ('message', models.TextField(blank=True)),
                ('meta', models.JSONField(blank=True, default=dict)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('deployment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.deployment')),
            ],
            options={
                'ordering': ['order'],
            },
        ),
        migrations.CreateModel(
            name='IntegrationSecret',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('secret_type', models.CharField(choices=[('internal_provision_token', 'Internal Provision Token'), ('dokploy_api', 'Dokploy API Key'), ('other', 'Other')], max_length=30)),
                ('encrypted_value', encrypted_model_fields.fields.EncryptedTextField()),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('last_rotated_at', models.DateTimeField(blank=True, null=True)),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='ProjectTemplate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('slug', models.SlugField(unique=True)),
                ('description', models.TextField(blank=True)),
                ('base_domain', models.CharField(max_length=255)),
                ('db_required', models.BooleanField(default=False)),
                ('db_type', models.CharField(choices=[('postgres', 'PostgreSQL'), ('mysql', 'MySQL'), ('mongodb', 'MongoDB'), ('other', 'Other')], default='postgres', max_length=20)),
                ('default_env', models.JSONField(blank=True, default=dict)),
                ('notify_emails', models.JSONField(blank=True, default=list)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('active', models.BooleanField(default=True)),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='ServiceTemplate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('service_type', models.CharField(choices=[('backend', 'Backend Service'), ('frontend', 'Frontend Service'), ('db', 'Database'), ('worker', 'Worker'), ('cron', 'Cron Job'), ('other', 'Other')], max_length=20)),
                ('repo_url', models.URLField(blank=True, null=True)),
                ('repo_branch', models.CharField(blank=True, max_length=100, null=True)),
                ('build_config', models.JSONField(default=dict)),
                ('expose_domain', models.BooleanField(default=False)),
                ('internal_provision_endpoint', models.CharField(blank=True, max_length=255, null=True)),
                ('order', models.IntegerField(default=0)),
                ('active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('internal_provision_token_secret', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.integrationsecret')),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.projecttemplate')),
            ],
            options={
                'ordering': ['order'],
            },
        ),
        migrations.CreateModel(
            name='Tenant',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('client_ref', models.CharField(blank=True, max_length=100, null=True)),
                ('subdomain', models.CharField(max_length=63, unique=True, validators=[django.core.validators.MinLengthValidator(2)])),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('provisioning', 'Provisioning'), ('waiting_for_internal_provision', 'Waiting for Internal Provision'), ('running', 'Running'), ('failed', 'Failed'), ('completed', 'Completed')], default='pending', max_length=30)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('detail', models.CharField(blank=True, max_length=255)),
                ('active', models.BooleanField(default=True)),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.projecttemplate')),
            ],
        ),
        migrations.CreateModel(
            name='TenantService',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('service_type', models.CharField(choices=[('backend', 'Backend Service'), ('frontend', 'Frontend Service'), ('db', 'Database'), ('worker', 'Worker'), ('cron', 'Cron Job'), ('other', 'Other')], max_length=20)),
                ('repo_url', models.URLField(blank=True, null=True)),
                ('repo_branch', models.CharField(blank=True, max_length=100, null=True)),
                ('app_id', models.CharField(blank=True, max_length=100, null=True)),
                ('db_id', models.CharField(blank=True, max_length=100, null=True)),
                ('domain', models.CharField(blank=True, max_length=255, null=True)),
                ('domain_id', models.CharField(blank=True, max_length=100, null=True)),
                ('created', models.BooleanField(default=False)),
                ('git_attached', models.BooleanField(default=False)),
                ('build_configured', models.BooleanField(default=False)),
                ('env_configured', models.BooleanField(default=False)),
                ('deploy_triggered', models.BooleanField(default=False)),
                ('deployed', models.BooleanField(default=False)),
                ('health_status', models.CharField(choices=[('ok', 'OK'), ('unhealthy', 'Unhealthy'), ('unknown', 'Unknown')], default='unknown', max_length=10)),
                ('health_tries', models.IntegerField(default=0)),
                ('next_wait_seconds', models.IntegerField(default=30)),
                ('last_deployed_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('detail', models.CharField(blank=True, max_length=255)),
                ('service_template', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.servicetemplate')),
                ('tenant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.tenant')),
            ],
        ),
        migrations.CreateModel(
            name='JobRecord',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('job_id', models.CharField(max_length=100)),
                ('job_type', models.CharField(choices=[('health', 'Health Check'), ('email', 'Email Notification'), ('retry', 'Retry Job')], max_length=20)),
                ('attempt', models.IntegerField(default=1)),
                ('next_run_at', models.DateTimeField()),
                ('status', models.CharField(choices=[('scheduled', 'Scheduled'), ('running', 'Running'), ('completed', 'Completed'), ('cancelled', 'Cancelled')], default='scheduled', max_length=20)),
                ('result_meta', models.JSONField(blank=True, default=dict)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('deployment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.deployment')),
                ('step', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.deploymentstep')),
            ],
        ),
        migrations.AddField(
            model_name='integrationsecret',
            name='project',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.projecttemplate'),
        ),
        migrations.AddField(
            model_name='integrationsecret',
            name='service_template',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.servicetemplate'),
        ),
        migrations.AddField(
            model_name='deploymentstep',
            name='tenant_service',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.tenantservice'),
        ),
        migrations.AddField(
            model_name='deployment',
            name='tenant',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.tenant'),
        ),
        migrations.AddField(
            model_name='deployment',
            name='triggered_by',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='AuditEntry',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action', models.CharField(choices=[('create', 'Create'), ('update', 'Update'), ('delete', 'Delete'), ('deploy', 'Deploy'), ('other', 'Other')], max_length=20)),
                ('model_name', models.CharField(max_length=100)),
                ('object_id', models.CharField(max_length=100)),
                ('details', models.JSONField(blank=True, default=dict)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]
